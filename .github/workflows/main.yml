name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  IMAGE_NAME: my-python-app

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Confirm project structure
        run: |
          ls -R
          find ./python-backend -name 'Dockerfile'
          find ./python-backend -name 'health_check.py'

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Install and Run Trivy Scan
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.49.1/trivy_0.49.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.49.1_Linux-64bit.deb
          trivy fs --exit-code 1 --severity CRITICAL,HIGH ./python-backend

      - name: 🐳 Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:latest ./python-backend

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: ✅ Checkout Code Again
        uses: actions/checkout@v4

      - name: 🔐 Setup SSH Access to EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📤 Upload Code to EC2
        run: |
          echo "✅ Uploading code to EC2..."
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r ./python-backend ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/

      - name: 🚀 Build & Run on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ec2-user/python-backend

            echo "🧹 Stopping old container (if exists)"
            docker rm -f ashu-container || true

            echo "🔒 Releasing port 80 if used"
            sudo fuser -k 80/tcp || true

            echo "🐳 Building new Docker image"
            docker build -t ashu:latest .

            echo "🚀 Running container on port 80"
            docker run -d -p 80:5000 --name ashu-container ashu:latest
          EOF
