name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - prod

env:
  IMAGE_NAME: my-python-app
  AWS_REGION: us-west-2
  ECR_REPOSITORY: my-python-app
  IMAGE_TAG: latest

jobs:
  build-and-ec2-deploy:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Confirm project structure
        run: |
          ls -R
          find ./python-backend -name 'Dockerfile'
          find ./python-backend -name 'health_check.py'

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Install and Run Trivy Scan
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.49.1/trivy_0.49.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.49.1_Linux-64bit.deb
          trivy fs --exit-code 1 --severity CRITICAL,HIGH ./python-backend

      - name: 🔐 Setup SSH Access to EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📤 Upload Code to EC2
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r ./python-backend ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/

      - name: 🚀 Build & Run on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ec2-user/python-backend
            docker rm -f ashu-container || true
            sudo fuser -k 80/tcp || true
            docker build -t ashu:latest .
            docker run -d -p 80:5000 --name ashu-container ashu:latest
          EOF

  ecr-push:
    if: github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials (Secrets-based)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🐳 Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 📦 Build and Push Docker Image to ECR
        run: |
          docker build -t $IMAGE_NAME:latest ./python-backend
          docker tag $IMAGE_NAME:latest ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

  eks-deploy:
    if: github.ref == 'refs/heads/prod'
    needs: ecr-push
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials (OIDC Role)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::211125363247:role/BitbuckerEKSRole
          aws-region: ${{ env.AWS_REGION }}

      - name: ⚙️ Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region eu-west-2 --name bjs-staging-cluster
      - name: show ns
        run: echo "Namespace is $NAMESPACE"
      - name: k8 file
        run: |
        
          cd python-backend/k8
          kubectl apply -f . -n  "$NAMESPACE"
